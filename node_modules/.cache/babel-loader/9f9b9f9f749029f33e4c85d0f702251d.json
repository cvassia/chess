{"ast":null,"code":"import * as Chess from \"chess.js\";\nimport { BehaviorSubject } from \"rxjs\"; // let promotion = \"rnb2bnr/pppPkppp/8/4p3/7q/8/PPPP1PPP/RNBQKBNR w KQ - 1 5\";\n// let checkmate = \"rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3\";\n\nconst chess = new Chess();\nexport const gameSubject = new BehaviorSubject();\nexport function initGame() {\n  updateGame();\n}\nexport function resetGame() {\n  chess.reset();\n  updateGame();\n}\nexport function handleMove(from, to) {\n  const promotions = chess.moves({\n    verbose: true\n  }).filter(m => m.promotion);\n\n  if (promotions.some(p => `${p.from}:${p.to}` === `${from}:${to}`)) {\n    const pendingPromotion = {\n      from,\n      to,\n      color: promotions[0].color\n    };\n    updateGame(pendingPromotion);\n  }\n\n  const {\n    pendingPromotion\n  } = gameSubject.getValue();\n\n  if (!pendingPromotion) {\n    move(from, to);\n  }\n}\nexport function move(from, to, promotion) {\n  let tempMove = {\n    from,\n    to\n  };\n\n  if (promotion) {\n    tempMove.promotion = promotion;\n  }\n\n  const legalMove = chess.move(tempMove);\n\n  if (legalMove) {\n    updateGame();\n  }\n}\n\nfunction updateGame(pendingPromotion) {\n  const isGameOver = chess.game_over();\n  const newGame = {\n    board: chess.board(),\n    pendingPromotion,\n    isGameOver,\n    result: isGameOver ? getGameResult() : null\n  };\n  gameSubject.next(newGame);\n}\n\nfunction getGameResult() {\n  if (chess.in_checkmate()) {\n    const winner = chess.turn() === \"w\" ? \"black\" : \"white\";\n    return `Checkmate - winner - ${winner}`;\n  } else if (chess.in_draw()) {\n    let reason = \"50 - moves - rule\";\n\n    if (chess.in_stalemate()) {\n      reason = \"Stalemate\";\n    } else if (chess.in_threefold_repetition()) {\n      reason = \"Repetition\";\n    } else if (chess.insufficient_material()) {\n      reason = \"insufficient material\";\n    }\n\n    return `Draw - ${reason}`;\n  } else {\n    return \"unknown reason\";\n  }\n}","map":{"version":3,"sources":["/Users/vassiachrist/Documents/dev/js/react/chess-game/src/Game.js"],"names":["Chess","BehaviorSubject","chess","gameSubject","initGame","updateGame","resetGame","reset","handleMove","from","to","promotions","moves","verbose","filter","m","promotion","some","p","pendingPromotion","color","getValue","move","tempMove","legalMove","isGameOver","game_over","newGame","board","result","getGameResult","next","in_checkmate","winner","turn","in_draw","reason","in_stalemate","in_threefold_repetition","insufficient_material"],"mappings":"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","sourcesContent":["import * as Chess from \"chess.js\";\nimport { BehaviorSubject } from \"rxjs\";\n\n// let promotion = \"rnb2bnr/pppPkppp/8/4p3/7q/8/PPPP1PPP/RNBQKBNR w KQ - 1 5\";\n// let checkmate = \"rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3\";\n\nconst chess = new Chess();\n\nexport const gameSubject = new BehaviorSubject();\n\nexport function initGame() {\n  updateGame();\n}\n\nexport function resetGame() {\n  chess.reset();\n  updateGame();\n}\n\nexport function handleMove(from, to) {\n  const promotions = chess.moves({ verbose: true }).filter((m) => m.promotion);\n  if (promotions.some((p) => `${p.from}:${p.to}` === `${from}:${to}`)) {\n    const pendingPromotion = { from, to, color: promotions[0].color };\n    updateGame(pendingPromotion);\n  }\n  const { pendingPromotion } = gameSubject.getValue();\n  if (!pendingPromotion) {\n    move(from, to);\n  }\n}\n\nexport function move(from, to, promotion) {\n  let tempMove = { from, to };\n  if (promotion) {\n    tempMove.promotion = promotion;\n  }\n\n  const legalMove = chess.move(tempMove);\n  if (legalMove) {\n    updateGame();\n  }\n}\n\nfunction updateGame(pendingPromotion) {\n  const isGameOver = chess.game_over();\n  const newGame = {\n    board: chess.board(),\n    pendingPromotion,\n    isGameOver,\n    result: isGameOver ? getGameResult() : null,\n  };\n\n  gameSubject.next(newGame);\n}\n\nfunction getGameResult() {\n  if (chess.in_checkmate()) {\n    const winner = chess.turn() === \"w\" ? \"black\" : \"white\";\n    return `Checkmate - winner - ${winner}`;\n  } else if (chess.in_draw()) {\n    let reason = \"50 - moves - rule\";\n    if (chess.in_stalemate()) {\n      reason = \"Stalemate\";\n    } else if (chess.in_threefold_repetition()) {\n      reason = \"Repetition\";\n    } else if (chess.insufficient_material()) {\n      reason = \"insufficient material\";\n    }\n    return `Draw - ${reason}`;\n  } else {\n    return \"unknown reason\";\n  }\n}\n"]},"metadata":{},"sourceType":"module"}